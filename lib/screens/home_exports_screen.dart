import 'package:flutter/material.dart';
import 'package:open_filex/open_filex.dart';
import 'package:intl/intl.dart';

import '../services/export_history.dart';
import '../models/export_record.dart';

class HomeExportsScreen extends StatefulWidget {
  final String searchQuery;
  const HomeExportsScreen({super.key, this.searchQuery = ''});

  @override
  State<HomeExportsScreen> createState() => _HomeExportsScreenState();
}

class _HomeExportsScreenState extends State<HomeExportsScreen> {
  final svc = ExportHistoryService();
  final _dateFmt = DateFormat('dd/MM/yyyy HH:mm');

  String? _region;
  List<ExportRecord> _all = [];
  List<ExportRecord> _filtered = [];

  @override
  void initState() {
    super.initState();
    _init();
  }

  @override
  void didUpdateWidget(covariant HomeExportsScreen oldWidget) {
    super.didUpdateWidget(oldWidget);
    if (oldWidget.searchQuery != widget.searchQuery) {
      _applyFilter();
    }
  }

  Future<void> _init() async {
    await svc.init();
    _all = svc.listAll()
      ..sort((a, b) => b.createdAt.compareTo(a.createdAt));
    _applyFilter();
  }

  void _applyFilter() {
    final q = widget.searchQuery.trim().toLowerCase();
    final r = _region;

    _filtered = _all.where((e) {
      final name = (e.data['ten_khach_hang'] ?? '').toLowerCase();
      final mst = (e.data['mst'] ?? '').toLowerCase();
      final so = (e.data['so_hop_dong'] ?? '').toLowerCase();
      final addr = (e.data['dia_chi'] ?? '').toLowerCase();

      final hitQ = q.isEmpty ||
          name.contains(q) ||
          mst.contains(q) ||
          so.contains(q) ||
          addr.contains(q);

      final kv = _detectRegion(e.data);
      final hitR = (r == null) || (kv == r);

      return hitQ && hitR;
    }).toList();

    setState(() {});
  }

  String _detectRegion(Map<String, String> data) {
    final explicit = (data['khu_vuc'] ?? '').trim();
    if (explicit.isNotEmpty) return explicit;

    final addr = (data['dia_chi'] ?? '').toLowerCase();
    const bac = [
      'h√† n·ªôi',
      'ha noi',
      'h·∫£i ph√≤ng',
      'qu·∫£ng ninh',
      'bac ninh',
      'b·∫Øc giang',
      'thai nguyen'
    ];
    const trung = [
      'ƒë√† n·∫µng',
      'th·ª´a thi√™n hu·∫ø',
      'qu·∫£ng nam',
      'qu·∫£ng ng√£i',
      'b√¨nh ƒë·ªãnh',
      'ph√∫ y√™n',
      'kh√°nh h√≤a',
      'gia lai',
      'kon tum',
      'ƒë·∫Øk l·∫Øk',
      'ƒë·∫Øk n√¥ng',
      'qu·∫£ng tr·ªã',
      'qu·∫£ng b√¨nh',
      'ngh·ªá an',
      'h√† tƒ©nh'
    ];
    const nam = [
      'h·ªì ch√≠ minh',
      'tphcm',
      'b√¨nh d∆∞∆°ng',
      'ƒë·ªìng nai',
      'v≈©ng t√†u',
      'long an',
      'ti·ªÅn giang',
      'b·∫øn tre',
      'tr√† vinh',
      'vƒ©nh long',
      'ƒë·ªìng th√°p',
      'an giang',
      'ki√™n giang',
      'h·∫≠u giang',
      's√≥c trƒÉng',
      'b·∫°c li√™u',
      'c√† mau',
      't√¢y ninh',
      'b√¨nh ph∆∞·ªõc'
    ];

    bool containsAny(String s, List<String> keys) =>
        keys.any((k) => s.contains(k));

    if (containsAny(addr, bac)) return 'B·∫Øc';
    if (containsAny(addr, trung)) return 'Trung';
    if (containsAny(addr, nam)) return 'Nam';
    return 'Kh√°c';
  }

  Future<void> _deleteRecord(ExportRecord record) async {
    await svc.delete(record);
    _all.remove(record);
    _applyFilter();
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('ƒê√£ xo√° h·ª£p ƒë·ªìng')),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Column(
        children: [
          const Divider(height: 1),
          Expanded(
            child: _filtered.isEmpty
                ? const Center(child: Text('Ch∆∞a c√≥ h·ª£p ƒë·ªìng n√†o ph√π h·ª£p'))
                : ListView.separated(
              itemCount: _filtered.length,
              separatorBuilder: (_, __) => const Divider(height: 1),
              itemBuilder: (_, i) {
                final r = _filtered[i];
                final name = r.data['ten_khach_hang'] ?? '(kh√¥ng c√≥)';
                final mst = r.data['mst'] ?? '';
                final so = r.data['so_hop_dong'] ?? '';
                final addr = r.data['dia_chi'] ?? '';
                final kv = _detectRegion(r.data);

                return Dismissible(
                  key: ValueKey(r.id),
                  direction: DismissDirection.startToEnd,
                  background: Container(
                    color: Colors.red,
                    alignment: Alignment.centerLeft,
                    padding: const EdgeInsets.only(left: 16),
                    child: const Icon(Icons.delete, color: Colors.white),
                  ),
                  confirmDismiss: (_) async {
                    return await showDialog<bool>(
                      context: context,
                      builder: (_) => AlertDialog(
                        title: const Text('Xo√° h·ª£p ƒë·ªìng'),
                        content: const Text(
                            'B·∫°n c√≥ ch·∫Øc mu·ªën xo√° h·ª£p ƒë·ªìng n√†y?'),
                        actions: [
                          TextButton(
                            onPressed: () =>
                                Navigator.pop(context, false),
                            child: const Text('Hu·ª∑'),
                          ),
                          ElevatedButton(
                            onPressed: () =>
                                Navigator.pop(context, true),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.red,
                            ),
                            child: const Text('Xo√°'),
                          ),
                        ],
                      ),
                    );
                  },
                  onDismissed: (_) => _deleteRecord(r),
                  child: ListTile(
                    title: Text(name),
                    subtitle: Text([
                      if (so.isNotEmpty) 'S·ªë Hƒê: $so',
                      if (mst.isNotEmpty) 'MST: $mst',
                      if (addr.isNotEmpty) addr,
                      '${_dateFmt.format(r.createdAt)} ¬∑ $kv',
                    ].join(' ¬∑ ')),
                    trailing: Text(r.outputType.toUpperCase()),
                    onTap: () async {
                      await OpenFilex.open(r.outputPath);
                    },
                  ),
                );
              },
            ),
          ),
        ],
      ),
      floatingActionButton: FloatingActionButton.extended(
        heroTag: 'fab_exports',
        onPressed: () async {
          // üëá BatchFillScreen s·∫Ω tr·∫£ v·ªÅ ExportRecord
          final ExportRecord? newRec = await Navigator.pushNamed(
            context,
            '/batch',
          ) as ExportRecord?;

          if (newRec != null && mounted) {
            await svc.addWithMove(newRec); // di chuy·ªÉn file + l∆∞u record
            _init();
          }
        },
        icon: const Icon(Icons.add),
        label: const Text('T·∫°o h·ª£p ƒë·ªìng'),
      ),
      floatingActionButtonLocation: FloatingActionButtonLocation.endFloat,
    );
  }
}
